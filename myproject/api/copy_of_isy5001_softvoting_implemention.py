# -*- coding: utf-8 -*-
"""Copy of ISY5001_softvoting_Implemention.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-GG51ef2lwk1ZYEoeLIcyRUsNqofXiaW
"""

# prompt: 连接谷歌drive

# from google.colab import drive
# drive.mount('/content/drive')

# from google.colab import files
import librosa
import numpy as np
import torch
import torch.nn.functional as F
import io
import joblib



def load_sklearn_model(model_path):
    model = joblib.load(model_path)
    return model


def extract_features(audio_data, sr):
    mfccs = librosa.feature.mfcc(y=audio_data, sr=sr, n_mfcc=13)
    mfccs_mean = np.mean(mfccs.T, axis=0)
    return mfccs_mean

def predict(model, features):

    if isinstance(model, torch.nn.Module):
        features_tensor = torch.tensor(features, dtype=torch.float32).unsqueeze(0)
        with torch.no_grad():
            output = model(features_tensor)
            probabilities = F.softmax(output, dim=1).numpy().flatten()
    else:
        features = features.reshape(1, -1)
        probabilities = model.predict_proba(features)[0]

    return probabilities

# 定义音频文件路径
audio_path = r"C:\Users\123\Desktop\project5001\AN_WILTY_EP15_truth1.wav"  # 替换为实际路径

audio_data, sr = librosa.load(audio_path, sr=None)

features = extract_features(audio_data, sr)

voting_classifier= load_sklearn_model(r'D:\project\project5001-backend-master\myproject\detection\voting_classifier.joblib')
voting_probabilities = predict(voting_classifier, features)




# Determine the predicted label based on the voting classifier's probabilities
predicted_label_voting = np.argmax(voting_probabilities)


# Print the results
print(f"Voting Classifier - Predicted Label: {predicted_label_voting}, Probabilities: {voting_probabilities}")




labels = [ 'Deception','Truth']

# Print the predicted label and lying probability for the Voting classifier
print(f"\nVoting Classifier Prediction: {labels[predicted_label_voting]}, Lying Probability: {voting_probabilities[0]}")